#!/usr/bin/env ruby

require 'optimist'
require 'rainbow'
require 'fileutils'
require 'chronic_duration'
require 'open3'

@root_dir = File.expand_path('../', __dir__)
@ansible_dir = "#{@root_dir}/ansible"
@log_dir = ""

@opts = Optimist.options do
  banner "\nUsage: Ansible Deployer [options]"
  banner "\nConfigure GitLab by running different ansible playbooks in parallel."
  banner "\nOptions:"
  opt :inventory, "Name of the Inventory file to use.", type: :string
  opt :environment_vars, "Semi-colon separated list of environment variables to pass to ansible-playbook command.", type: :string
  opt :playbooks, "Space separated list of playbooks to run, this will prevent all playbooks being run and only run the provided list.", type: :strings
  opt :help, 'Show help message'
end

def opt_check
  @opts[:environment_vars] = "ANSIBLE_HOST_KEY_CHECKING=False" if @opts[:environment_vars].nil?
  return unless @opts[:inventory].nil?

  puts Rainbow("An Inventory file must be specified with the -i flag.").red
  Optimist.educate
end

def prepare_logs_dir
  @log_dir = "#{@root_dir}/logs/#{@opts[:inventory]}/#{Time.now.strftime('%Y-%m-%d_%H%M%S')}"
  puts Rainbow("Logging to folder #{@log_dir}").yellow
  FileUtils.mkdir_p @log_dir
end

def run_playbooks(playbooks)
  inventory_dir = "#{@ansible_dir}/inventories/#{@opts[:inventory]}"
  threads = []

  puts Rainbow("\nRunning Playbooks: #{playbooks}").yellow

  playbooks.each do |playbook|
    threads << Thread.new do
      playbook_start_time = Time.now
      _, _, status = Open3.capture3("(cd #{@ansible_dir} && #{@opts[:environment_vars]} ansible-playbook -i #{inventory_dir} #{@ansible_dir}/#{playbook}.yml) &> #{@log_dir}/#{playbook}.log")
      playbook_run_duration = ChronicDuration.output((Time.now - playbook_start_time).to_i, format: :long)

      if status.success?
        puts Rainbow("#{playbook} playbook finished successfuly after #{playbook_run_duration}").green
      else
        puts Rainbow("#{playbook} playbook failed after #{playbook_run_duration}").red
      end
    end
  end

  threads.each(&:join)
  puts Rainbow("Playbooks Complete").yellow
end

opt_check
prepare_logs_dir

run_start_time = Time.now
puts Rainbow("Starting playbook runs at #{run_start_time}").yellow

if @opts[:playbooks].nil?
  run_playbooks %w[common]
  run_playbooks %w[haproxy gitlab-nfs consul elastic monitor]
  run_playbooks %w[postgres pgbouncer redis sidekiq]
  run_playbooks %w[gitlab-rails gitaly]
  run_playbooks %w[post-configure]
else
  run_playbooks @opts[:playbooks]
end

run_duration = ChronicDuration.output((Time.now - run_start_time).to_i, format: :long)
puts Rainbow("All playbooks finished after #{run_duration}.").yellow
