stages:
  - start
  - provision
  - configure
  - stop

.update-base:
  image: alpine
  before_script:
    - echo "http://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories
    - apk add -u --no-cache git-crypt
    - echo "$GIT_CRYPT_KEY" | base64 -d > /tmp/git-crypt.key
    - git-crypt unlock /tmp/git-crypt.key
    - chmod 600 keys/performance/gitlab-qa-gcp-ssh
  variables:
    GCLOUD_SERVICEACCOUNT_KEY_PATH: keys/performance/serviceaccount-$ENVIRONMENT_NAME.json
  only:
    - schedules

start:
  extends: .update-base
  stage: start
  script:
    - apk add -u --no-cache python curl which bash
    - curl -sSL https://sdk.cloud.google.com > /tmp/gcl.sh && bash /tmp/gcl.sh --disable-prompts 1> /dev/null && rm /tmp/gcl.sh
    - export PATH=$PATH:/root/google-cloud-sdk/bin && unset CLOUDSDK_CORE_PROJECT
    - gcloud auth activate-service-account --key-file=$GCLOUD_SERVICEACCOUNT_KEY_PATH
    - gcloud config set project $GCP_PROJECT_NAME
    - echo "Starting VMs on GCP project '$GCP_PROJECT_NAME'"
    - gcloud compute instances start --zone $GCLOUD_ZONE $(gcloud compute instances list --format='value(name)')
    - sleep 60
  only:
    variables:
      - $ENVIRONMENT_ACTION == "start" || $ENVIRONMENT_ACTION == "update"

terraform:
  extends: .update-base
  stage: provision
  variables:
    TERRAFORM_VERSION: "0.12.18"
  script:
    - apk add -u --no-cache wget unzip
    - wget -q -P /tmp/ https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
    - unzip /tmp/terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /usr/bin
    - cd terraform/$ENVIRONMENT_NAME
    - terraform init
    - terraform apply -auto-approve
    - sleep 20
  only:
    variables:
      - $ENVIRONMENT_ACTION == "update"

ansible:
  extends: .update-base
  stage: configure
  script:
    - apk add -u --no-cache openssh-client ca-certificates ansible
    - chmod 700 ansible
    - cd ansible
    - pip3 install -U -r requirements/ansible-python-packages.txt
    - ansible-galaxy install -r requirements/ansible-roles.yml
    - ansible-playbook -i inventories/$ENVIRONMENT_NAME all.yml
  only:
    variables:
      - $ENVIRONMENT_ACTION == "update"

stop:
  extends: .update-base
  stage: stop
  script:
    - apk add -u --no-cache python curl which bash
    - curl -sSL https://sdk.cloud.google.com > /tmp/gcl.sh && bash /tmp/gcl.sh --disable-prompts 1> /dev/null && rm /tmp/gcl.sh
    - export PATH=$PATH:/root/google-cloud-sdk/bin && unset CLOUDSDK_CORE_PROJECT
    - gcloud auth activate-service-account --key-file=$GCLOUD_SERVICEACCOUNT_KEY_PATH
    - gcloud config set project $GCP_PROJECT_NAME
    - echo "Stopping VMs on GCP project '$GCP_PROJECT_NAME'"
    - gcloud compute instances stop --zone $GCLOUD_ZONE $(gcloud compute instances list --format='value(name)' --filter="-name ~ monitor-|haproxy-external-\d+$")
  only:
    variables:
      - $ENVIRONMENT_ACTION == "stop"