# Ansible / General
install_gitlab: true
uninstall_gitlab: false
gitlab_package: "{{ lookup('env','GITLAB_PACKAGE') | default('gitlab-ee', true) }}"
gitlab_repo_script_url: "{{ lookup('env','GITLAB_REPO_SCRIPT_URL') | default('https://packages.gitlab.com/install/repositories/gitlab/nightly-builds/script.deb.sh', true) }}"
ansible_hostname_underscorized: "{{ ansible_hostname | replace('-', '_') }}"

gitlab_secrets_storage: "{{ shared_prefix }}-secrets-storage"
gitlab_object_storage: "{{ prefix }}-object-storage"

# Consul
consul_datacenter: "{{ prefix }}-dc"
consul_int_ips: "{{ (groups[(groups | select('match', '^consul.*') | join())] | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | list) if (groups | select('match', '^consul.*') | list | count == 1) else [] }}"
consul_password: '0a6da13ae1754357b71ba1ac6c6caa6b'

# HAProxy / Network
haproxy_internal_int_ip: "{{ groups['haproxy_internal'] | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | join('') }}"
haproxy_external_int_ip: "{{ groups['haproxy_external'] | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | join('') }}"
haproxy_external_ext_ip: "{{ groups['haproxy_external'] | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='accessConfigs') | map('first') | map(attribute='natIP') | join('') }}"
global_ip: "{{ haproxy_external_ext_ip }}"

# Gitaly
gitaly_main_int_ip: "{{ groups['gitaly_main'] | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | join('') }}"
gitaly_other_int_ips: "{{ groups['gitaly_other'] | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | list }}"
gitaly_token: 'abc123secret'

# GitLab NFS
gitlab_nfs_int_ip: "{{ groups['gitlab_nfs'] | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | join('') }}"
gitlab_nfs_path: "/mnt/gitlab-nfs"
gitlab_nfs_export_cidr: "{{ (ansible_default_ipv4.address + '/16') | ipaddr('network/prefix') }}"

# GitLab Rails
gitlab_rails_int_ips: "{{ (groups['gitlab_rails_main'] + groups['gitlab_rails_other']) | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | list }}"
gitlab_rails_int_ips_for_pg: "{{ gitlab_rails_int_ips | map('regex_replace', '^(.*)$', '\\1/32') | list }}"

# Sidekiq
sidekiq_int_ips: "{{ (groups['sidekiq']) | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | list }}"
sidekiq_int_ips_for_pg: "{{ sidekiq_int_ips | map('regex_replace', '^(.*)$', '\\1/32') | list }}"

# GitLab Monitor
monitor_int_ip: "{{ groups['monitor'] | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | join('') }}"

# GitLab Postgres / PGBouncer
postgres_password: '37aca09f2f8ff04f27bdb2ed159ec81f'
postgres_replication_password: 'e10adc3949ba59abbe56e057f20f883e'
postgres_fdw_user: 'gitlab_geo_fdw'
postgres_fdw_password: '74429426019688d025ed1a7beb660019'
postgres_int_ips: "{{ groups['postgres'] | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | list }}"
postgres_int_ips_for_pg: "{{ postgres_int_ips | map('regex_replace', '^(.*)$', '\\1/32') | list }}"

postgres_max_wal_senders: 20 # FIXME: to be sure
postgres_max_replication_slots: 20 # FIXME: to be sure
# postgres_max_wal_senders: "{{ ((groups['postgres_main'] + groups['postgres_other']) | length) + 1 }}"
# postgres_max_replication_slots: "{{ ((groups['postgres_main'] + groups['postgres_other']) | length) + 1 }}"

pgbouncer_password: '9fdf957895675ef0741f66811c8fa958'
pgbouncer_int_ips: "{{ groups['pgbouncer'] | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | list }}"
pgbouncer_int_ips_for_pg: "{{ pgbouncer_int_ips | map('regex_replace', '^(.*)$', '\\1/32') | list }}"

# GitLab Redis
redis_port: 6379
redis_sentinel_port: 26379
redis_password: 'rae5ceiH3sheeGohz2la'

redis_main_int_ip: "{{ (groups['redis_main'] | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | join('')) if 'redis' in groups else [] }}"
redis_sentinel_int_ips: "{{ (groups[(groups | select('match', '.*_sentinel$') | join())] | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | list) if (groups | select('match', '.*_sentinel$') | list | count == 1) else [] }}"

redis_cache_main_int_ip: "{{ (groups['redis_cache_main'] | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | join('')) if 'redis_cache' in groups else [] }}"
redis_sentinel_cache_int_ips: "{{ (groups['redis_sentinel_cache'] | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | list) if 'redis_sentinel_cache' in groups else [] }}"

redis_persistent_main_int_ip: "{{ (groups['redis_persistent_main'] | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | join('')) if 'redis_persistent' in groups else [] }}"
redis_sentinel_persistent_int_ips: "{{ (groups['redis_sentinel_persistent'] | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | list) if 'redis_sentinel_persistent' in groups else [] }}"

# Jaeger Distributed Tracing
jaeger: "{{ 'jaeger' in groups }}"
jaeger_int_ip: "{{ (groups['jaeger'] | map('extract', hostvars, ['networkInterfaces']) |  map('first') | map(attribute='networkIP') | join('')) if jaeger else [] }}"
