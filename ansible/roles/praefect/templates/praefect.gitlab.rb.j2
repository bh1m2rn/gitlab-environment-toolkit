# Avoid running unnecessary services on the Praefect server
gitaly['enable'] = false
postgresql['enable'] = false
redis['enable'] = false
puma['enable'] = false
sidekiq['enable'] = false
gitlab_workhorse['enable'] = false
prometheus['enable'] = false
alertmanager['enable'] = false
grafana['enable'] = false
gitlab_exporter['enable'] = false
nginx['enable'] = false

# Praefect Configuration
praefect['enable'] = true
praefect['listen_addr'] = '0.0.0.0:2305'
praefect['auth_token'] = '{{ praefect_external_token }}'

{% if praefect_postgres_external %}
## Postgres Non Omnibus (PaaS \ User Provided)

{% if db_migrate is defined and db_migrate == true %}
### Migrations
praefect['database_host'] = '{{ praefect_postgres_migrations_host }}'
praefect['database_port'] = '{{ praefect_postgres_migrations_port }}'

praefect['auto_migrate'] = true
{% else %}
praefect['database_host'] = '{{ praefect_postgres_host }}'
praefect['database_port'] = '{{ praefect_postgres_port }}'

praefect['auto_migrate'] = false
{% endif %}

### Praefect Cache settings
{% if gitlab_version != '' and gitlab_version is version('14.0', '<') %}
praefect['database_host_no_proxy'] = '{{ praefect_postgres_cache_host }}'
praefect['database_port_no_proxy'] = '{{ praefect_postgres_cache_port }}'
{% else %}
praefect['database_direct_host'] = '{{ praefect_postgres_cache_host }}'
praefect['database_direct_port'] = '{{ praefect_postgres_cache_port }}'
praefect['database_direct_dbname'] = '{{ praefect_postgres_cache_database_name }}'
{% endif %}

{% elif 'praefect_postgres' in groups %}
## Postgres Omnibus - Separate Node(s) - Colocated or Separated

{% if db_migrate is defined and db_migrate == true %}
### Migrations
praefect['database_host'] = '{{ praefect_postgres_migrations_host }}'
praefect['database_port'] = '{{ praefect_postgres_migrations_port }}'
praefect['auto_migrate'] = true
{% elif 'praefect_pgbouncer' in groups%}
praefect['database_host'] = '{{ internal_lb_host }}'
praefect['database_port'] = '{{ pgbouncer_port if praefect_postgres_colocated else praefect_pgbouncer_port }}'

### Praefect Cache settings
{% if gitlab_version != '' and gitlab_version is version('14.0', '<') %}
praefect['database_host_no_proxy'] = '{{ internal_lb_host }}'
praefect['database_port_no_proxy'] = '{{ pgbouncer_port if praefect_postgres_colocated else praefect_pgbouncer_port }}'
{% else %}
praefect['database_direct_host'] = '{{ internal_lb_host }}'
praefect['database_direct_port'] = '{{ pgbouncer_port if praefect_postgres_colocated else praefect_pgbouncer_port }}'
praefect['database_direct_dbname'] = 'praefect_production_direct'
{% endif %}

praefect['database_sslmode'] = 'disable'
praefect['auto_migrate'] = false
{% else %}
## Postgres Omnibus - Separate Node
praefect['database_host'] = '{{ praefect_postgres_host }}'
praefect['database_port'] = '{{ praefect_postgres_port }}'
praefect['auto_migrate'] = false
{% endif %}
{% endif %}

praefect['database_user'] = '{{ praefect_postgres_username }}'
praefect['database_password'] = '{{ praefect_postgres_password }}'
praefect['database_dbname'] = '{{ praefect_postgres_database_name }}'

# Gitaly 
{% if gitlab_version == '' or gitlab_version is version('14.0', '>=') %}
praefect['virtual_storages'] = {
  'default' => {
    'nodes' => {
      'gitaly-1' => {
        'address' => 'tcp://{{ gitaly_primary_int_ip }}:8075',
        'token'   => '{{ praefect_internal_token }}'
      },
{% for ip in gitaly_secondary_int_ips %}
      'gitaly-{{ loop.index + 1 }}' => {
        'address' => 'tcp://{{ ip }}:8075',
        'token'   => '{{ praefect_internal_token }}'
      },
{% endfor %}
    }
  }
}
{% else %}
praefect['virtual_storages'] = {
  'default' => {
    'gitaly-1' => {
      'address' => 'tcp://{{ gitaly_primary_int_ip }}:8075',
      'token'   => '{{ praefect_internal_token }}'
    },
{% for ip in gitaly_secondary_int_ips %}
    'gitaly-{{ loop.index + 1 }}' => {
      'address' => 'tcp://{{ ip }}:8075',
      'token'   => '{{ praefect_internal_token }}'
    },
{% endfor %}
  }
}
{% endif %}

gitlab_rails['rake_cache_clear'] = false
gitlab_rails['auto_migrate'] = false

# Consul
consul['enable'] = true
consul['configuration'] = {
  bind_addr: '{{ ansible_default_ipv4.address }}',
  retry_join: %w({{ (consul_int_ips if 'consul' in groups else gitlab_rails_int_ips) | join(' ') }})
}
consul['monitoring_service_discovery'] = true

# Monitoring
praefect['prometheus_listen_addr'] = '0.0.0.0:9652'
node_exporter['listen_address'] = '0.0.0.0:9100'

# Workaround for Sidekiq Cluster which is enabling by default
sidekiq['enable'] = false

custom_confs = Dir.glob(File.join("/etc/gitlab/", "gitlab.praefect.*.rb"))
custom_confs.each { |conf|
  from_file conf
}
