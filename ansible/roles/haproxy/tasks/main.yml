---
- name: Create /opt/haproxy directory
  file:
    path: /opt/haproxy
    state: directory
  tags: reconfigure

- name: Configure External SSL
  block:
    - name: Configure Let's Encrypt certificates
      import_tasks: ssl/letsencrypt.yml
      when:
        - external_url_ssl
        - external_ssl_source == 'letsencrypt'

    - name: Configure User provided certificates
      import_tasks: ssl/user.yml
      when:
        - external_url_ssl
        - external_ssl_source == 'user'

    - name: Cleanup any previous External SSL config if disabled
      import_tasks: ssl/none.yml
      when:
        - not external_url_ssl
        - "external_ssl_source == ''"
  when: "'haproxy_external' in group_names"
  tags: reconfigure

- name: Create /opt/haproxy/haproxy.cfg file
  template:
    src: templates/haproxy.cfg.j2
    dest: /opt/haproxy/haproxy.cfg
  tags:
   - reconfigure

- name: Add custom HAproxy configs
  block:
    - name: Check if Custom External Haproxy template file exists
      stat:
        path: "{{ haproxy_external_custom_config_file }}"
      register: haproxy_external_custom_config_file_path
      delegate_to: localhost
      become: false

    - name: Configure Custom External HAproxy settings
      blockinfile:
        path: /opt/haproxy/haproxy.cfg
        marker: "# {mark} ANSIBLE MANAGED BLOCK - HAProxy External Custom Settings"
        block: "{{ lookup('file', haproxy_external_custom_config_file) }}"
      when:
        - haproxy_external_custom_config_file_path.stat.exists
        -  "'haproxy_external' in group_names"

    - name: Check if Custom Internal Haproxy template file exists
      stat:
        path: "{{ haproxy_internal_custom_config_file }}"
      register: haproxy_internal_custom_config_file_path
      delegate_to: localhost
      become: false

    - name: Configure Custom Internal HAproxy settings
      blockinfile:
        path: /opt/haproxy/haproxy.cfg
        marker: "# {mark} ANSIBLE MANAGED BLOCK - HAProxy Internal Custom Settings"
        block: "{{ lookup('file', haproxy_internal_custom_config_file) }}"
      when:
        - haproxy_internal_custom_config_file_path.stat.exists
        -  "'haproxy_internal' in group_names"
  tags:
    - custom_tag

- name: Start HAProxy Internal Docker
  docker_container:
    name: haproxy
    image: haproxy:alpine
    pull: true
    recreate: true
    restart_policy: unless-stopped
    state: started
    ports: "{{ haproxy_internal_ports + haproxy_custom_internal_ports }}"
    volumes:
      - /opt/haproxy:/usr/local/etc/haproxy:ro
    sysctls:
      net.ipv4.ip_unprivileged_port_start: 0
  when: "'haproxy_internal' in group_names"
  tags:
    - reconfigure
    - restart

- name: Start HAProxy External Docker
  docker_container:
    name: haproxy
    image: haproxy:alpine
    pull: true
    recreate: true
    restart_policy: unless-stopped
    state: started
    ports: "{{ haproxy_external_ports + haproxy_custom_external_ports }}"
    volumes:
      - /opt/haproxy:/usr/local/etc/haproxy:ro
    sysctls:
      net.ipv4.ip_unprivileged_port_start: 0
  when: "'haproxy_external' in group_names"
  tags:
    - reconfigure
    - restart

- name: Wait for HAProxy Docker to be running
  shell: docker inspect -f \{\{.State.Status\}\} haproxy
  register: haproxy_docker_status
  until: haproxy_docker_status.stdout == 'running'
  retries: 10
  delay: 2
  tags:
    - reconfigure
    - restart
