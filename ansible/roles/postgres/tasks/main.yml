---
- name: Mount GitLab NFS
  mount:
    fstype: nfs
    opts: defaults,nofail,lookupcache=positive
    state: mounted
    src: "{{ gitlab_nfs_int_ip }}:{{ gitlab_nfs_path }}"
    path: "{{ gitlab_nfs_path }}"
  tags: nfs

- name: Check if Patroni was setup previously
  stat:
    path: /var/log/gitlab/patroni/current
  register: patroni_check

- name: Warn if attempting to use repmgr on a patroni setup
  fail:
    msg: Attempt detected to switch from Patroni to Repmgr. This is not supported and will result in data loss. Exiting...
  when: patroni_check.stat.exists and (postgres_replication_manager != 'patroni')

- name: Setup GitLab config file
  template:
    src: templates/postgres.gitlab.rb.j2
    dest: /etc/gitlab/gitlab.rb
  tags: reconfigure

- name: Check if custom config exists
  stat:
    path: "{{ postgres_custom_config_file }}"
  delegate_to: localhost
  become: false
  register: postgres_custom_config_file_path

- name: Copy custom GitLab config file
  copy:
    src: "{{ postgres_custom_config_file }}"
    dest: "/etc/gitlab/gitlab.postgres.custom.rb"
    mode: 0755
  tags: reconfigure
  when: postgres_custom_config_file_path.stat.exists

- name: Copy secrets file from NFS
  shell: "cp {{ gitlab_nfs_path }}/gitlab-secrets.json /etc/gitlab/gitlab-secrets.json 2>/dev/null || true"
  tags: secrets

- name: Reconfigure PostgreSQL with failover error handling
  block:
    - name: Reconfigure PostgreSQL
      command: gitlab-ctl reconfigure
  rescue:
    - name: Reset Transaction Log on assumed Patroni failover error
      command: /opt/gitlab/embedded/bin/pg_resetwal -f /var/opt/gitlab/postgresql/data
      become_user: gitlab-psql
      when: postgres_replication_manager == 'patroni'

    - name: Wait for Replication to finish
      command: gitlab-ctl patroni members
      register: patroni_member_status
      until: '"creating replica" not in patroni_member_status.stdout'
      retries: 60
      delay: 5
      when: postgres_replication_manager == 'patroni'

    - name: Reconfigure PostgreSQL
      command: gitlab-ctl reconfigure
      when: postgres_replication_manager == 'patroni'
  tags: reconfigure

- name: Restart PostgreSQL
  command: gitlab-ctl restart
  register: result
  retries: 2
  until: result is success
  tags:
    - reconfigure
    - restart

- name: Copy secrets file to NFS if missing
  shell: "cp -n /etc/gitlab/gitlab-secrets.json {{ gitlab_nfs_path }}"
  tags: secrets
  run_once: true

- name: Show debug output of postgres cluster status
  block:
    - name: Debug capture output of 'gitlab-ctl repmgr cluster show'
      shell: "gitlab-ctl repmgr cluster show 2>/dev/null"
      register: cluster_show
      ignore_errors: true
      when: postgres_replication_manager != 'patroni'
      tags: debug

    - name: Debug show output of 'gitlab-ctl repmgr cluster show'
      debug:
        msg: "{{ cluster_show.stdout }}"
      when:
        - cluster_show.stdout is defined
      tags: debug

    - name: Debug capture output of 'gitlab-ctl patroni members'
      shell: "gitlab-ctl patroni members 2>/dev/null"
      register: patroni_members
      ignore_errors: true
      when: postgres_replication_manager == 'patroni'
      tags: debug

    - name: Debug show output of 'gitlab-ctl patroni members'
      debug:
        msg: "{{ patroni_members.stdout }}"
      when:
        - patroni_members.stdout is defined
      tags: debug

- name: Check secondary standby status
  shell: (gitlab-ctl repmgr cluster show 2>/dev/null | grep -E 'standby \| {{ ansible_hostname }}') || echo ""
  register: postgres_secondary_standby_status
  tags: postgres_secondary_standby
  when:
    - "'postgres_secondary' in group_names"
    - postgres_replication_manager != 'patroni'

- name: Enable secondary standby
  shell: "gitlab-ctl repmgr standby setup {{ postgres_host }} -w"
  register: postgres_secondary_standby_result
  tags: postgres_secondary_standby
  when:
    - "'postgres_secondary' in group_names"
    - postgres_replication_manager != 'patroni'
    - postgres_secondary_standby_status.stdout == ''
  failed_when:
    - postgres_secondary_standby_result.rc != 0
    - '"exists already" not in postgres_secondary_standby_result.stderr'

- name: Create skip-auto-reconfigure file
  file:
    path: /etc/gitlab/skip-auto-reconfigure
    state: touch
    mode: u=rw,g=r,o=r
