# Disable all components except PostgreSQL and Repmgr and Consul
roles ['postgres_role']

{% if groups['postgres'] | length > 1 %}
{% if install_patroni is defined and install_patroni %}
# Enable Patroni
patroni['enable'] = true

patroni['postgresql']['max_wal_senders'] = {{ (groups['postgres'] | length) + 1 }}
patroni['postgresql']['max_replication_slots'] = {{ (groups['postgres'] | length) + 1 }}

patroni['remove_data_directory_on_rewind_failure'] = {{ patroni_remove_data_directory_on_rewind_failure | lower }}
patroni['remove_data_directory_on_diverged_timelines'] = {{ patroni_remove_data_directory_on_diverged_timelines | lower }}

postgresql['shared_preload_libraries'] = 'pg_stat_statements'
{% if postgres_version is defined %}
postgresql['version'] = {{ postgres_version }}
{% endif %}

{% else %}
# Enable Repmgr
postgresql['shared_preload_libraries'] = 'repmgr_funcs, pg_stat_statements'
postgresql['wal_level'] = 'replica'
postgresql['hot_standby'] = 'on'

repmgr['host'] = '{{ ansible_default_ipv4.address }}'
repmgr['trust_auth_cidr_addresses'] = %w(0.0.0.0/0)

postgresql['max_wal_senders'] = {{ (groups['postgres'] | length) + 1 }}
postgresql['max_replication_slots'] = {{ (groups['postgres'] | length) + 1 }}
repmgr['master_on_initialization'] = {{ postgres_repmgr_master }}

postgresql['version'] = 11

{% endif %}

{% else %}
repmgr['enable'] = false
patroni['enable'] = false
{% endif %}

# PostgreSQL configuration
postgresql['listen_address'] = '0.0.0.0'
postgresql['max_connections'] = 500

{% if 'pgbouncer' in groups %}
postgresql['pgbouncer_user_password'] = "{{ (pgbouncer_password + 'pgbouncer') | md5 }}"
{% endif %}
postgresql['sql_user_password'] = "{{ (postgres_password + 'gitlab') | md5 }}"

postgresql['trust_auth_cidr_addresses'] = %w(0.0.0.0/0)

gitlab_rails['auto_migrate'] = false

# Consul
{% if groups['postgres'] | length > 1 %}
consul['services'] = %w(postgresql)
{% endif %}
consul['enable'] = true
consul['configuration'] = {
  bind_addr: '{{ ansible_default_ipv4.address }}',
  retry_join: %w({{ (consul_int_ips if 'consul' in groups else gitlab_rails_int_ips) | join(' ') }})
}
consul['monitoring_service_discovery'] = true

# Monitoring
postgres_exporter['listen_address'] = '0.0.0.0:9187'
node_exporter['listen_address'] = '0.0.0.0:9100'

confs = Dir.glob(File.join("/etc/gitlab/", "gitlab.*.rb"))
confs.each { |conf|
  from_file conf
}