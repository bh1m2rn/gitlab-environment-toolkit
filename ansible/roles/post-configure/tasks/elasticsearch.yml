- name: Gather Elastic group facts
  setup:
    filter: ansible_processor_vcpus
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups['elastic'] }}"

- name: Generate OAuth Token if not present
  include_tasks: oauth-token.yml
  when: gitlab_oauth_token is not defined
  tags: oauth

- name: Configure Ultimate License
  include_tasks: license.yml
  when: gitlab_license_plan is not defined
  tags: license

- name: Clean out previous Elasticsearch configuration and index
  block:
    - name: Delete old Elasticsearch index
      shell: |
        gitlab-rake gitlab:elastic:delete_index
        gitlab-rake gitlab:elastic:clear_index_status

    - name: Unconfigure Elasticsearch settings
      uri:
        url: '{{ external_url_sanitised }}/api/v4/application/settings'
        method: PUT
        headers:
          Authorization: 'Bearer {{ gitlab_oauth_token }}'
        body:
          elasticsearch_url: ""
          elasticsearch_shards: "5"
          elasticsearch_indexing: false
          elasticsearch_search: false
        status_code: 200, 201
        body_format: json
      when: gitlab_license_plan == 'ultimate'
  when:
    - gitlab_license_plan == 'ultimate'
    - elasticsearch_clean_install == 'true'

- name: Get and save Environment Settings
  block:
    - name: Get Environment Settings
      uri:
        url: '{{ external_url_sanitised }}/api/v4/application/settings'
        method: GET
        headers:
          Authorization: 'Bearer {{ gitlab_oauth_token }}'
        status_code: 200, 201
        body_format: json
        return_content: yes
      register: env_settings_response

    - name: Save Environment Settings
      set_fact:
        gitlab_environment_settings: '{{ env_settings_response.json }}'
  when: gitlab_license_plan == 'ultimate'

- name: Configure Elasticsearch settings
  uri:
    url: '{{ external_url_sanitised }}/api/v4/application/settings'
    method: PUT
    headers:
      Authorization: 'Bearer {{ gitlab_oauth_token }}'
    body:
      elasticsearch_url: "{{ elasticsearch_urls | join(',') }}"
      elasticsearch_shards: "{{ elasticsearch_shards }}"
      elasticsearch_replicas: "{{ elasticsearch_replicas }}"
    status_code: 200, 201
    body_format: json
  when: gitlab_license_plan == 'ultimate'

- name: Configure Elasticsearch Index
  block:
    - name: Create empty index for GitLab
      shell: gitlab-rake gitlab:elastic:create_empty_index

    - name: Enable GitLab Elasticsearch indexing setting
      uri:
        url: '{{ external_url_sanitised }}/api/v4/application/settings'
        method: PUT
        headers:
          Authorization: 'Bearer {{ gitlab_oauth_token }}'
        body:
          elasticsearch_url: "{{ elasticsearch_urls | join(',') }}"
          elasticsearch_indexing: true
        status_code: 200, 201
        body_format: json
      register: elasticsearch_status_result
      retries: 5
      delay: 5
      until: elasticsearch_status_result.status == 200 or elasticsearch_status_result.status == 201

    - name: Index all GitLab projects
      shell: gitlab-rake gitlab:elastic:index_projects

    - name: Wait until indexing is complete
      shell: gitlab-rake gitlab:elastic:index_projects_status
      register: index_status_result
      retries: 20
      delay: 10
      until: "(index_status_result.stdout | regex_search('[0-9]+\\.[0-9]+') | float > 90.0) or '(0/0 projects)' in index_status_result.stdout"
  when:
    - gitlab_license_plan == 'ultimate'
    - not gitlab_environment_settings.elasticsearch_indexing

- name: Get and save Environment Settings
  block:
  - name: Get Environment Settings
    uri:
      url: '{{ external_url_sanitised }}/api/v4/application/settings'
      method: GET
      headers:
        Authorization: 'Bearer {{ gitlab_oauth_token }}'
      status_code: 200, 201
      body_format: json
      return_content: yes
    register: env_settings_response

  - name: Save Environment Settings
    set_fact:
      gitlab_environment_settings: '{{ env_settings_response.json }}'
  when: gitlab_license_plan == 'ultimate'

- name: Enable Elasticsearch Search
  uri:
    url: '{{ external_url_sanitised }}/api/v4/application/settings'
    method: PUT
    headers:
      Authorization: 'Bearer {{ gitlab_oauth_token }}'
    body:
      elasticsearch_search: true
    status_code: 200, 201
    body_format: json
  when:
    - gitlab_license_plan == 'ultimate'
    - not gitlab_environment_settings.elasticsearch_search
