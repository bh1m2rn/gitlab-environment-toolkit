- name: Gather Elastic group facts
  setup:
    filter: ansible_processor_vcpus
  register: result
  retries: 3
  delay: 2
  until: result is success
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups['elastic'] }}"

- name: Configure Ultimate License
  include_tasks: license.yml
  when: gitlab_license_plan is not defined
  tags: license

- name: Clean out previous Elasticsearch configuration and index
  block:
    - name: Delete old Elasticsearch index
      block:
        - name: Delete old Elasticsearch index for GitLab via GitLab Rails
          command: "{{ item }}"
          loop:
            - gitlab-rake gitlab:elastic:delete_index
            - gitlab-rake gitlab:elastic:clear_index_status
          delegate_to: "{{ groups['gitlab_rails'][0] }}"
          delegate_facts: true
          become: true
          when: "'gitlab_rails' in groups"

        - name: Delete old Elasticsearch index for GitLab via GitLab Task Runner pod
          community.kubernetes.k8s_exec:
            pod: "{{ task_runner_pod }}"
            namespace: "{{ gitlab_charts_release_namespace }}"
            command: "{{ item }}"
          loop:
            - gitlab-rake gitlab:elastic:delete_index
            - gitlab-rake gitlab:elastic:clear_index_status
          when:
            - task_runner_pod is defined
            - "'gitlab_rails' not in groups"

    - name: Unconfigure Elasticsearch settings
      uri:
        url: '{{ external_url_sanitised }}/api/v4/application/settings'
        method: PUT
        headers:
          PRIVATE-TOKEN: '{{ access_token_key }}'
        body:
          elasticsearch_url: ""
          elasticsearch_shards: "5"
          elasticsearch_indexing: false
          elasticsearch_search: false
        follow_redirects: all
        status_code: 200, 201
        body_format: json
      when: gitlab_license_plan == 'ultimate'

    - name: Pause for 1 min for old Elasticsearch index to clear
      pause:
        minutes: 1
  when:
    - gitlab_license_plan == 'ultimate'
    - elasticsearch_clean_install == 'true'

- name: Get and save Environment Settings
  block:
    - name: Get Environment Settings
      uri:
        url: '{{ external_url_sanitised }}/api/v4/application/settings'
        method: GET
        headers:
          PRIVATE-TOKEN: '{{ access_token_key }}'
        status_code: 200, 201
        body_format: json
        return_content: true
      register: env_settings_response

    - name: Save Environment Settings
      set_fact:
        gitlab_environment_settings: '{{ env_settings_response.json }}'
  when: gitlab_license_plan == 'ultimate'

- name: Configure Elasticsearch settings
  uri:
    url: '{{ external_url_sanitised }}/api/v4/application/settings'
    method: PUT
    headers:
      PRIVATE-TOKEN: '{{ access_token_key }}'
    body:
      elasticsearch_url: "{{ elasticsearch_urls | join(',') }}"
      elasticsearch_shards: "{{ elasticsearch_shards }}"
      elasticsearch_replicas: "{{ elasticsearch_replicas }}"
    follow_redirects: all
    status_code: 200, 201
    body_format: json
  when: gitlab_license_plan == 'ultimate'

- name: Configure Elasticsearch Index
  block:
    - name: Create empty index for GitLab
      block:
        - name: Create empty index for GitLab via GitLab Rails
          command: gitlab-rake gitlab:elastic:create_empty_index
          delegate_to: "{{ groups['gitlab_rails'][0] }}"
          delegate_facts: true
          become: true
          when: "'gitlab_rails' in groups"

        - name: Create empty index for GitLab via GitLab Task Runner pod
          community.kubernetes.k8s_exec:
            pod: "{{ task_runner_pod }}"
            namespace: "{{ gitlab_charts_release_namespace }}"
            command: gitlab-rake gitlab:elastic:create_empty_index
          when:
            - task_runner_pod is defined
            - "'gitlab_rails' not in groups"

    - name: Enable GitLab Elasticsearch indexing setting
      uri:
        url: '{{ external_url_sanitised }}/api/v4/application/settings'
        method: PUT
        headers:
          PRIVATE-TOKEN: '{{ access_token_key }}'
        body:
          elasticsearch_url: "{{ elasticsearch_urls | join(',') }}"
          elasticsearch_indexing: true
        follow_redirects: all
        status_code: 200, 201
        body_format: json
      register: elasticsearch_status_result
      retries: 5
      delay: 5
      until: elasticsearch_status_result.status == 200 or elasticsearch_status_result.status == 201

    - name: Index all GitLab projects
      block:
        - name: Index all GitLab projects via GitLab Rails
          command: gitlab-rake gitlab:elastic:index_projects
          delegate_to: "{{ groups['gitlab_rails'][0] }}"
          delegate_facts: true
          become: true
          when: "'gitlab_rails' in groups"

        - name: Index all GitLab projects via GitLab Task Runner pod
          community.kubernetes.k8s_exec:
            pod: "{{ task_runner_pod }}"
            namespace: "{{ gitlab_charts_release_namespace }}"
            command: gitlab-rake gitlab:elastic:index_projects
          when:
            - task_runner_pod is defined
            - "'gitlab_rails' not in groups"

    - name: Wait until indexing is complete
      block:
        - name: Wait until indexing is complete via GitLab Rails
          command: gitlab-rake gitlab:elastic:index_projects_status
          delegate_to: "{{ groups['gitlab_rails'][0] }}"
          delegate_facts: true
          become: true
          register: index_status_result
          retries: 20
          delay: 10
          until: "(index_status_result.stdout | regex_search('[0-9]+\\.[0-9]+') | float > 90.0) or '(0/0 projects)' in index_status_result.stdout"
          when: "'gitlab_rails' in groups"

        - name: Wait until indexing is complete via GitLab Task Runner pod
          community.kubernetes.k8s_exec:
            pod: "{{ task_runner_pod }}"
            namespace: "{{ gitlab_charts_release_namespace }}"
            command: gitlab-rake gitlab:elastic:index_projects_status
          register: index_status_result
          retries: 20
          delay: 10
          until: "(index_status_result.stdout | regex_search('[0-9]+\\.[0-9]+') | float > 90.0) or '(0/0 projects)' in index_status_result.stdout"
          when:
            - task_runner_pod is defined
            - "'gitlab_rails' not in groups"
  when:
    - gitlab_license_plan == 'ultimate'
    - not gitlab_environment_settings.elasticsearch_indexing

- name: Get and save Environment Settings
  block:
    - name: Get Environment Settings
      uri:
        url: '{{ external_url_sanitised }}/api/v4/application/settings'
        method: GET
        headers:
          PRIVATE-TOKEN: '{{ access_token_key }}'
        status_code: 200, 201
        body_format: json
        return_content: true
      register: env_settings_response

    - name: Save Environment Settings
      set_fact:
        gitlab_environment_settings: '{{ env_settings_response.json }}'
  when: gitlab_license_plan == 'ultimate'

- name: Enable Elasticsearch Search
  uri:
    url: '{{ external_url_sanitised }}/api/v4/application/settings'
    method: PUT
    headers:
      PRIVATE-TOKEN: '{{ access_token_key }}'
    body:
      elasticsearch_search: true
    follow_redirects: all
    status_code: 200, 201
    body_format: json
  when:
    - gitlab_license_plan == 'ultimate'
    - not gitlab_environment_settings.elasticsearch_search
